{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem-vindo ao microCI A documenta\u00e7\u00e3o completa pode ser encontrada em microci.dev . O microCI \u00e9 uma ferramenta para auxiliar a constru\u00e7\u00e3o de pipelines de integra\u00e7\u00e3o cont\u00ednua. O principal diferencial do microCI \u00e9 a gera\u00e7\u00e3o de scripts port\u00e1veis e totalmente audit\u00e1veis para execu\u00e7\u00e3o de tarefas em containers docker . Como todos os passos s\u00e3o executados em um ou mais containers docker, todo o processo se torna reprodut\u00edvel em: a) qualquer m\u00e1quina do time de desenvolvimento, b) no servidor que realizar\u00e1 o build autom\u00e1tico ap\u00f3s os commits, c) no servidor que realizar\u00e1 o deploy para produ\u00e7\u00e3o... Enfim a mesma ferramenta, sem depend\u00eancia, pode ser usada tanto na m\u00e1quina do dev quanto no servidor. No desktop A utiliza\u00e7\u00e3o do microCI no desktop do dev \u00e9 muito simples: microCI | bash No comando acima o microCI leu um arquivo .microCI.yml contendo a descri\u00e7\u00e3o dos passos da pipeline e gerou um script para execu\u00e7\u00e3o destes passos. Este script \u00e9 escrito na sa\u00edda padr\u00e3o e pode ser encadeado com outras ferramentas ou passado para um interpretador bash para a execu\u00e7\u00e3o. Um arquivo chamado .microCI.log \u00e9 gerado com todas as mensagens, warning, erros de todos os comandos executados e pode ser analisado para resolver algum problema que possa ocorrer. No servidor Para execu\u00e7\u00e3o no servidor basta expor webhooks que, ao serem acionados, executam microCI nas respectivas pastas do projeto. Requisitos m\u00ednimos Um ambiente docker corretamente configurado Bash Instala\u00e7\u00e3o A instala\u00e7\u00e3o \u00e9 igualmente simples, bastando copiar o execut\u00e1vel para uma pasta que esteja no PATH . Para remover o microCI completamente do sistema basta apagar o arquivo copiado para o PATH. curl -L https://github.com/geraldolsribeiro/microCI/releases/download/v0.15.2/microCI \\ -o /usr/local/bin/microCI chmod 755 /usr/local/bin/microCI Container docker Voc\u00ea pode utilizar qualquer container docker para execu\u00e7\u00e3o, tanto os p\u00fablicos do Docker HUB quanto os que voc\u00ea desenvolver internamente. Integra\u00e7\u00e3o com github, gitlab, ... O modo mais simples e seguro de utilizar o microCI para ler ou escrever nos reposit\u00f3rios \u00e9 realizar o acesso atrav\u00e9s de chave SSH. Por fazer Abaixo est\u00e3o algumas funcionalidades que poder\u00e3o estar presente nos pr\u00f3ximos releases. criar pacote deb criar pacote rpm passar usu\u00e1rio atual para container para evitar gera\u00e7\u00e3o de arquivos como root na pasta de trabalho exibir mensagem de erro do passo que falhou substitui\u00e7\u00e3o de vari\u00e1veis nos steps uso de vari\u00e1veis de ambiente e segredos configurados no servidor criar imagem docker a partir de reposit\u00f3rio git Vers\u00f5es 0.15.2 Plugin fetch 0.14.1 Plugin beamer 0.13.0 Configura\u00e7\u00e3o de rede docker 0.12.0 Plugin clang-format e junit2html 0.11.1 Notifica\u00e7\u00e3o em canal do discord 0.10.1 M\u00faltiplos arquivos de modelo 0.9.0 Plugin plantuml 0.8.0 Plugin clang-tidy 0.7.0 Plugin cppcheck 0.6.1 Plugin git_publish 0.5.0 Montagem de volumes; C\u00f3pia de chave SSH 0.4.0 Constru\u00e7\u00e3o do microCI pelo microCI 0.3.0 Cria arquivos de configura\u00e7\u00e3o 0.2.0 Plugin mkdocs 0.1.0 Passo em bash e plugin git_deploy 0.0.1 Vers\u00e3o inicial para prova de conceito Licen\u00e7a MIT License Copyright (c) 2022 Geraldo Luis da Silva Ribeiro \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2588\u2580\u2591\u2591\u2591 \u2591\u2591\u2591\u2588\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2591\u2591 \u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Bem-vindo ao microCI"},{"location":"#bem-vindo-ao-microci","text":"A documenta\u00e7\u00e3o completa pode ser encontrada em microci.dev . O microCI \u00e9 uma ferramenta para auxiliar a constru\u00e7\u00e3o de pipelines de integra\u00e7\u00e3o cont\u00ednua. O principal diferencial do microCI \u00e9 a gera\u00e7\u00e3o de scripts port\u00e1veis e totalmente audit\u00e1veis para execu\u00e7\u00e3o de tarefas em containers docker . Como todos os passos s\u00e3o executados em um ou mais containers docker, todo o processo se torna reprodut\u00edvel em: a) qualquer m\u00e1quina do time de desenvolvimento, b) no servidor que realizar\u00e1 o build autom\u00e1tico ap\u00f3s os commits, c) no servidor que realizar\u00e1 o deploy para produ\u00e7\u00e3o... Enfim a mesma ferramenta, sem depend\u00eancia, pode ser usada tanto na m\u00e1quina do dev quanto no servidor.","title":"Bem-vindo ao microCI"},{"location":"#no-desktop","text":"A utiliza\u00e7\u00e3o do microCI no desktop do dev \u00e9 muito simples: microCI | bash No comando acima o microCI leu um arquivo .microCI.yml contendo a descri\u00e7\u00e3o dos passos da pipeline e gerou um script para execu\u00e7\u00e3o destes passos. Este script \u00e9 escrito na sa\u00edda padr\u00e3o e pode ser encadeado com outras ferramentas ou passado para um interpretador bash para a execu\u00e7\u00e3o. Um arquivo chamado .microCI.log \u00e9 gerado com todas as mensagens, warning, erros de todos os comandos executados e pode ser analisado para resolver algum problema que possa ocorrer.","title":"No desktop"},{"location":"#no-servidor","text":"Para execu\u00e7\u00e3o no servidor basta expor webhooks que, ao serem acionados, executam microCI nas respectivas pastas do projeto.","title":"No servidor"},{"location":"#requisitos-minimos","text":"Um ambiente docker corretamente configurado Bash","title":"Requisitos m\u00ednimos"},{"location":"#instalacao","text":"A instala\u00e7\u00e3o \u00e9 igualmente simples, bastando copiar o execut\u00e1vel para uma pasta que esteja no PATH . Para remover o microCI completamente do sistema basta apagar o arquivo copiado para o PATH. curl -L https://github.com/geraldolsribeiro/microCI/releases/download/v0.15.2/microCI \\ -o /usr/local/bin/microCI chmod 755 /usr/local/bin/microCI","title":"Instala\u00e7\u00e3o"},{"location":"#container-docker","text":"Voc\u00ea pode utilizar qualquer container docker para execu\u00e7\u00e3o, tanto os p\u00fablicos do Docker HUB quanto os que voc\u00ea desenvolver internamente.","title":"Container docker"},{"location":"#integracao-com-github-gitlab","text":"O modo mais simples e seguro de utilizar o microCI para ler ou escrever nos reposit\u00f3rios \u00e9 realizar o acesso atrav\u00e9s de chave SSH.","title":"Integra\u00e7\u00e3o com github, gitlab, ..."},{"location":"#por-fazer","text":"Abaixo est\u00e3o algumas funcionalidades que poder\u00e3o estar presente nos pr\u00f3ximos releases. criar pacote deb criar pacote rpm passar usu\u00e1rio atual para container para evitar gera\u00e7\u00e3o de arquivos como root na pasta de trabalho exibir mensagem de erro do passo que falhou substitui\u00e7\u00e3o de vari\u00e1veis nos steps uso de vari\u00e1veis de ambiente e segredos configurados no servidor criar imagem docker a partir de reposit\u00f3rio git","title":"Por fazer"},{"location":"#versoes","text":"0.15.2 Plugin fetch 0.14.1 Plugin beamer 0.13.0 Configura\u00e7\u00e3o de rede docker 0.12.0 Plugin clang-format e junit2html 0.11.1 Notifica\u00e7\u00e3o em canal do discord 0.10.1 M\u00faltiplos arquivos de modelo 0.9.0 Plugin plantuml 0.8.0 Plugin clang-tidy 0.7.0 Plugin cppcheck 0.6.1 Plugin git_publish 0.5.0 Montagem de volumes; C\u00f3pia de chave SSH 0.4.0 Constru\u00e7\u00e3o do microCI pelo microCI 0.3.0 Cria arquivos de configura\u00e7\u00e3o 0.2.0 Plugin mkdocs 0.1.0 Passo em bash e plugin git_deploy 0.0.1 Vers\u00e3o inicial para prova de conceito","title":"Vers\u00f5es"},{"location":"#licenca","text":"MIT License Copyright (c) 2022 Geraldo Luis da Silva Ribeiro \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2588\u2580\u2591\u2591\u2591 \u2591\u2591\u2591\u2588\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2591\u2591 \u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licen\u00e7a"},{"location":"tutorial/tutorial_mkdocs_material_local/","text":"Tutorial mkdocs local Introdu\u00e7\u00e3o O objetivo deste tutorial \u00e9 a execu\u00e7\u00e3o do microCI localmente para criar documenta\u00e7\u00e3o. A ferramenta mkdocs-material oferece uma maneira pr\u00e1tica para documentar o projeto usando arquivos no formato markdown. Neste tutorial veremos como criar um projeto mkdocs e gerar uma documenta\u00e7\u00e3o usando o microCI . Configura\u00e7\u00e3o do microCI O microCI cria um arquivo de configura\u00e7\u00e3o inicial para executar o mkdocs-material : microCI --new mkdocs_material Um arquivo chamado .microCI.yml foi criado no diret\u00f3rio atual: --- steps : # Remova este passo ap\u00f3s a primeira execu\u00e7\u00e3o - name : \"Criar arquivos iniciais do mkdocs\" plugin : name : \"mkdocs_material\" action : \"new .\" - name : \"Construir documenta\u00e7\u00e3o em formato HTML\" description : \"Documenta\u00e7\u00e3o do projeto\" plugin : name : \"mkdocs_material\" action : \"build\" # Contruindo para uma pasta personalizada # action: \"build --site-dir public - name : \"Servidor local na porta 8000 (Ctrl+C para finalizar)\" description : \"Executa servidor local para preview da documenta\u00e7\u00e3o\" # passo executado localmente only : \"local-step\" plugin : name : \"mkdocs_material\" action : \"serve\" # Porta personalizada, caso j\u00e1 esteja utilizando a padr\u00e3o 8000 # port: 9001 Cada chave name inicia um novo passo. No arquivo criado existem 3 passos: Criar arquivos iniciais do mkdocs Construir documenta\u00e7\u00e3o em formato HTML Servidor local na porta 8000 Passos com a chave only n\u00e3o s\u00e3o executados por padr\u00e3o. Primeira execu\u00e7\u00e3o Edite o arquivo .microCI.yml para ajustar a configura\u00e7\u00e3o se necess\u00e1rio e execute: microCI | bash Se a gera\u00e7\u00e3o foi bem sucedida o nome dos passos seguidos de OK s\u00e3o exibidos no terminal: Criar arquivos iniciais do mkdocs...............: OK Construir documenta\u00e7\u00e3o em formato HTML..........: OK Remova o primeiro passo (Criar arquivos iniciais do mkdocs) e execute o comando novamente: microCI | bash Passos adicionais A configura\u00e7\u00e3o contem um passo que pode ser executado sozinho para subir um servidor para previsualizar a documenta\u00e7\u00e3o. microCI --only local-step | bash","title":"Tutorial mkdocs local"},{"location":"tutorial/tutorial_mkdocs_material_local/#tutorial-mkdocs-local","text":"","title":"Tutorial mkdocs local"},{"location":"tutorial/tutorial_mkdocs_material_local/#introducao","text":"O objetivo deste tutorial \u00e9 a execu\u00e7\u00e3o do microCI localmente para criar documenta\u00e7\u00e3o. A ferramenta mkdocs-material oferece uma maneira pr\u00e1tica para documentar o projeto usando arquivos no formato markdown. Neste tutorial veremos como criar um projeto mkdocs e gerar uma documenta\u00e7\u00e3o usando o microCI .","title":"Introdu\u00e7\u00e3o"},{"location":"tutorial/tutorial_mkdocs_material_local/#configuracao-do-microci","text":"O microCI cria um arquivo de configura\u00e7\u00e3o inicial para executar o mkdocs-material : microCI --new mkdocs_material Um arquivo chamado .microCI.yml foi criado no diret\u00f3rio atual: --- steps : # Remova este passo ap\u00f3s a primeira execu\u00e7\u00e3o - name : \"Criar arquivos iniciais do mkdocs\" plugin : name : \"mkdocs_material\" action : \"new .\" - name : \"Construir documenta\u00e7\u00e3o em formato HTML\" description : \"Documenta\u00e7\u00e3o do projeto\" plugin : name : \"mkdocs_material\" action : \"build\" # Contruindo para uma pasta personalizada # action: \"build --site-dir public - name : \"Servidor local na porta 8000 (Ctrl+C para finalizar)\" description : \"Executa servidor local para preview da documenta\u00e7\u00e3o\" # passo executado localmente only : \"local-step\" plugin : name : \"mkdocs_material\" action : \"serve\" # Porta personalizada, caso j\u00e1 esteja utilizando a padr\u00e3o 8000 # port: 9001 Cada chave name inicia um novo passo. No arquivo criado existem 3 passos: Criar arquivos iniciais do mkdocs Construir documenta\u00e7\u00e3o em formato HTML Servidor local na porta 8000 Passos com a chave only n\u00e3o s\u00e3o executados por padr\u00e3o.","title":"Configura\u00e7\u00e3o do microCI"},{"location":"tutorial/tutorial_mkdocs_material_local/#primeira-execucao","text":"Edite o arquivo .microCI.yml para ajustar a configura\u00e7\u00e3o se necess\u00e1rio e execute: microCI | bash Se a gera\u00e7\u00e3o foi bem sucedida o nome dos passos seguidos de OK s\u00e3o exibidos no terminal: Criar arquivos iniciais do mkdocs...............: OK Construir documenta\u00e7\u00e3o em formato HTML..........: OK Remova o primeiro passo (Criar arquivos iniciais do mkdocs) e execute o comando novamente: microCI | bash","title":"Primeira execu\u00e7\u00e3o"},{"location":"tutorial/tutorial_mkdocs_material_local/#passos-adicionais","text":"A configura\u00e7\u00e3o contem um passo que pode ser executado sozinho para subir um servidor para previsualizar a documenta\u00e7\u00e3o. microCI --only local-step | bash","title":"Passos adicionais"},{"location":"tutorial/tutorial_mkdocs_material_servidor/","text":"Tutorial mkdocs servidor Introdu\u00e7\u00e3o Depois de executar o microCI localmente no tutorial anterrior, podemos come\u00e7ar a automa\u00e7\u00e3o da pipeline atrav\u00e9s de webhooks e execu\u00e7\u00e3o remota. Neste tutorial ser\u00e1 mostrado como, a partir de um commit no reposit\u00f3rio de trabalho, \u00e9 gerada a vers\u00e3o final e disponibiliza\u00e7\u00e3o em produ\u00e7\u00e3o. A execu\u00e7\u00e3o se dar\u00e1 conforme a figura abaixo: Evento inicial: O desenvolvedor atualiza a documenta\u00e7\u00e3o realiza um commit e envia para o servidor git. Passo 1: O servidor git recebe o evento de push com os commits do usu\u00e1rio e dispara um webhook vinculado ao reposit\u00f3rio. Nota: o evento de push ocorre uma \u00fanica vez mesmo que este contenha v\u00e1rios commits . Passo 2: O servidor de webhook recebe as informa\u00e7\u00f5es do \u00faltimo commit e executa um script vinculado ao webhook. Nota: o servidor de webhook utilizado neste exemplo pode ser obtido em https://github.com/adnanh/webhook . Abaixo est\u00e3o a declara\u00e7\u00e3o dois webhooks usados neste tutorial: # Disparado no passo 2 - id : \"microCI_awesome\" execute-command : \"/usr/local/bin/microCI.sh\" command-working-directory : \"/opt/microCI/repos/awesome/\" # Disparado no passo 5 - id : \"microCI_awesome_deploy\" execute-command : \"/usr/local/bin/microCI.sh\" command-working-directory : \"/opt/microCI/repos/awesome_deploy/\" Nota: todos os webhooks executam o mesmo script Passo 3: Uma implementa\u00e7\u00e3o m\u00ednima do script de adapta\u00e7\u00e3o do webhook para o microCI pode ser vista a seguir: #!/bin/bash # Arquivo microCI.sh # Acrescente suas personaliza\u00e7\u00f5es aqui if [ -d \".git\" ] ; then git pull fi # Este comando \u00e9 executado no caminho do reposit\u00f3rio microCI | bash Nota: O procedimento \u00e9 id\u00eantico ao executado localmente: o microCI l\u00ea a configura\u00e7\u00e3o do arquivo .microCI.yml e executa os passos descritos. # Arquivo .microCI.yml do reposit\u00f3rio awesome --- steps : - name : \"Construir documenta\u00e7\u00e3o em formato HTML\" description : \"Documenta\u00e7\u00e3o do projeto\" plugin : name : \"mkdocs_material\" action : \"build\" - name : \"Publicar HTML para reposit\u00f3rio git\" ssh : copy_from : \"${HOME}/.ssh\" copy_to : \"/root/.ssh\" plugin : name : \"git_publish\" git_url : \"git@nome_do_servidor.com.br:awesome_deploy.git\" copy_to : \"/deploy\" copy_from : \"site\" clean_before : true O plugin mkdocs_material com a a\u00e7\u00e3o build l\u00ea os arquivos markdown e constroi a documenta\u00e7\u00e3o em formato HTML e a salva na pasta site para ser utilizada no pr\u00f3ximo passo. O plugin git_publish clona o reposit\u00f3rio apontado por git_url na pasta /deploy , ent\u00e3o copia o conte\u00fado da pasta site para a pasta /deploy , dentro do container, e faz o commit para atualizando o repost\u00f3rio. Passo 4 : O reposit\u00f3rio awesome_deploy recebe o post lan\u00e7ado pelo plugin git_publish no passo anterior e dispara outro webhook. Passo 5: O servidor de webhook recebe as informa\u00e7\u00f5es do \u00faltimo commit e executa um script vinculado ao webhook. # Disparado no passo 5 - id : \"microCI_awesome_deploy\" execute-command : \"/usr/local/bin/microCI.sh\" command-working-directory : \"/opt/microCI/repos/awesome_deploy/\" Nota: executa o procedimento igual ao do passo 2, mas desta vez na pasta do reposit\u00f3rio awesome_deploy . Passo 6: O microCI executa o plugin git_deploy que realiza o checkout do reposit\u00f3rio na pasta de implanta\u00e7\u00e3o. Para garantir que o hist\u00f3rico com os commits antigos n\u00e3o estar\u00e3o dispon\u00edveis em produ\u00e7\u00e3o o checkout \u00e9 realizado de forma dividida, ficando o hist\u00f3rico ( .git ) em uma pasta privada e somente os arquivos do \u00faltimo commit no caminho de deploy especificado. Passo 7: A pasta de deploy atualizada no passo anterior est\u00e1 dispon\u00edvel em produ\u00e7\u00e3o.","title":"Tutorial mkdocs servidor"},{"location":"tutorial/tutorial_mkdocs_material_servidor/#tutorial-mkdocs-servidor","text":"","title":"Tutorial mkdocs servidor"},{"location":"tutorial/tutorial_mkdocs_material_servidor/#introducao","text":"Depois de executar o microCI localmente no tutorial anterrior, podemos come\u00e7ar a automa\u00e7\u00e3o da pipeline atrav\u00e9s de webhooks e execu\u00e7\u00e3o remota. Neste tutorial ser\u00e1 mostrado como, a partir de um commit no reposit\u00f3rio de trabalho, \u00e9 gerada a vers\u00e3o final e disponibiliza\u00e7\u00e3o em produ\u00e7\u00e3o. A execu\u00e7\u00e3o se dar\u00e1 conforme a figura abaixo: Evento inicial: O desenvolvedor atualiza a documenta\u00e7\u00e3o realiza um commit e envia para o servidor git. Passo 1: O servidor git recebe o evento de push com os commits do usu\u00e1rio e dispara um webhook vinculado ao reposit\u00f3rio. Nota: o evento de push ocorre uma \u00fanica vez mesmo que este contenha v\u00e1rios commits . Passo 2: O servidor de webhook recebe as informa\u00e7\u00f5es do \u00faltimo commit e executa um script vinculado ao webhook. Nota: o servidor de webhook utilizado neste exemplo pode ser obtido em https://github.com/adnanh/webhook . Abaixo est\u00e3o a declara\u00e7\u00e3o dois webhooks usados neste tutorial: # Disparado no passo 2 - id : \"microCI_awesome\" execute-command : \"/usr/local/bin/microCI.sh\" command-working-directory : \"/opt/microCI/repos/awesome/\" # Disparado no passo 5 - id : \"microCI_awesome_deploy\" execute-command : \"/usr/local/bin/microCI.sh\" command-working-directory : \"/opt/microCI/repos/awesome_deploy/\" Nota: todos os webhooks executam o mesmo script Passo 3: Uma implementa\u00e7\u00e3o m\u00ednima do script de adapta\u00e7\u00e3o do webhook para o microCI pode ser vista a seguir: #!/bin/bash # Arquivo microCI.sh # Acrescente suas personaliza\u00e7\u00f5es aqui if [ -d \".git\" ] ; then git pull fi # Este comando \u00e9 executado no caminho do reposit\u00f3rio microCI | bash Nota: O procedimento \u00e9 id\u00eantico ao executado localmente: o microCI l\u00ea a configura\u00e7\u00e3o do arquivo .microCI.yml e executa os passos descritos. # Arquivo .microCI.yml do reposit\u00f3rio awesome --- steps : - name : \"Construir documenta\u00e7\u00e3o em formato HTML\" description : \"Documenta\u00e7\u00e3o do projeto\" plugin : name : \"mkdocs_material\" action : \"build\" - name : \"Publicar HTML para reposit\u00f3rio git\" ssh : copy_from : \"${HOME}/.ssh\" copy_to : \"/root/.ssh\" plugin : name : \"git_publish\" git_url : \"git@nome_do_servidor.com.br:awesome_deploy.git\" copy_to : \"/deploy\" copy_from : \"site\" clean_before : true O plugin mkdocs_material com a a\u00e7\u00e3o build l\u00ea os arquivos markdown e constroi a documenta\u00e7\u00e3o em formato HTML e a salva na pasta site para ser utilizada no pr\u00f3ximo passo. O plugin git_publish clona o reposit\u00f3rio apontado por git_url na pasta /deploy , ent\u00e3o copia o conte\u00fado da pasta site para a pasta /deploy , dentro do container, e faz o commit para atualizando o repost\u00f3rio. Passo 4 : O reposit\u00f3rio awesome_deploy recebe o post lan\u00e7ado pelo plugin git_publish no passo anterior e dispara outro webhook. Passo 5: O servidor de webhook recebe as informa\u00e7\u00f5es do \u00faltimo commit e executa um script vinculado ao webhook. # Disparado no passo 5 - id : \"microCI_awesome_deploy\" execute-command : \"/usr/local/bin/microCI.sh\" command-working-directory : \"/opt/microCI/repos/awesome_deploy/\" Nota: executa o procedimento igual ao do passo 2, mas desta vez na pasta do reposit\u00f3rio awesome_deploy . Passo 6: O microCI executa o plugin git_deploy que realiza o checkout do reposit\u00f3rio na pasta de implanta\u00e7\u00e3o. Para garantir que o hist\u00f3rico com os commits antigos n\u00e3o estar\u00e3o dispon\u00edveis em produ\u00e7\u00e3o o checkout \u00e9 realizado de forma dividida, ficando o hist\u00f3rico ( .git ) em uma pasta privada e somente os arquivos do \u00faltimo commit no caminho de deploy especificado. Passo 7: A pasta de deploy atualizada no passo anterior est\u00e1 dispon\u00edvel em produ\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"}]}