{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to microCI","text":"<p>microCI is a powerful tool designed to streamline the creation of continuous-integration pipelines by generating portable, auditable scripts for executing tasks in Docker containers. This ensures that every step in the process is fully reproducible across various environments:</p> <ul> <li>Developer's machines</li> <li>Servers for automatic builds after commits</li> <li>Servers for deployment to production</li> </ul> <p>With microCI, the same tool, free of dependencies, can be used seamlessly in both development and production environments. For complete documentation, visit microci.dev.</p> <p>The complete documentation can be found at microci.dev.</p>"},{"location":"#on-the-desktop","title":"On the desktop","text":"<p>Using <code>microCI</code> on the developer's desktop is very simple:</p> <pre><code>microCI | bash\n</code></pre> <p>In the above command, <code>microCI</code> reads a <code>.microCI.yml</code> file containing the description of the pipeline steps and generates a script for executing these steps. This script is written to standard output and can be chained with other tools or passed to a <code>bash</code> interpreter for execution.</p> <p>A file called <code>.microCI.log</code> is generated with all messages, warnings, errors from all executed commands and can be analyzed to resolve any problems that may occur.</p>"},{"location":"#on-the-server","title":"On the server","text":"<p>To run on the server, it is sufficient to expose webhooks that, when triggered, execute <code>microCI</code> in the respective project folders.</p>"},{"location":"#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>A properly configured Docker environment</li> <li>Bash shell</li> <li><code>jq</code> and <code>yq</code> utilities</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>The installation is equally simple, just copy the executable to a folder in the <code>PATH</code>. To remove the <code>microCI</code> from the system delete the file copied to the PATH.</p> <pre><code>sudo curl -fsSL https://github.com/geraldolsribeiro/microci/releases/latest/download/microCI \\\n  -o /usr/bin/microCI\nsudo chmod 755 /usr/bin/microCI\n</code></pre>"},{"location":"#docker-container","title":"Docker Container","text":"<p>You can use any Docker container for execution, both public ones from Docker HUB and those you develop internally.</p>"},{"location":"#integration-with-github-gitlab","title":"Integration with github, gitlab, ...","text":"<p>The simplest and safest way to use <code>microCI</code> to read from or write to repositories are to access them through an SSH key.</p>"},{"location":"#to-do","title":"To do","text":"<p>Below are some features that may be present in the next releases.</p> <ul> <li>create deb package</li> <li>create rpm package</li> <li>pass current user to container to avoid generating files as <code>root</code> in the working directory</li> <li>display error message from the failed step</li> <li>variable substitution in steps</li> <li>use of environment variables and secrets configured on the server</li> <li>create a Docker image from a git repository</li> </ul>"},{"location":"#debian-dependencies","title":"Debian dependencies","text":"<p>For building standalone microCI binary the following dependencies should be installed:</p> <pre><code>sudo apt install gettext clang-format libspdlog-dev libfmt-dev libyaml-cpp-dev libssl-dev libcrypto++-dev\n</code></pre>"},{"location":"#docker-private-repository","title":"Docker private repository","text":"<p>In some cases, running a private registry without SSL is necessary to add the IP of the registry server to the <code>insecure-registries</code> section of the <code>/etc/docker/daemon.json</code> file.</p> <p>Example:</p> <pre><code>{\n    \"insecure-registries\": [\"11.22.33.44:5000\", \"192.168.1.1:5000\"]\n}\n</code></pre>"},{"location":"#versions","title":"Versions","text":"<ul> <li><code>0.36.0</code> Allows to run devices inside the container without the --privileged flag</li> <li><code>0.35.0</code> Plugin <code>vhdl-format</code></li> <li><code>0.34.0</code> Plugin <code>Doxygen</code> </li> <li><code>0.33.0</code> Global environment file parsing </li> <li><code>0.32.0</code> Integration config file generation</li> <li><code>0.31.0</code> Plugin <code>template</code></li> <li><code>0.30.0</code> Plugin <code>pikchr</code></li> <li><code>0.29.0</code> Plugin <code>docmd</code></li> <li><code>0.28.0</code> Translation support added</li> <li><code>0.27.0</code> Plugin <code>pandoc</code></li> <li><code>0.26.3</code> Update <code>clang-tidy</code></li> <li><code>0.26.0</code> Offline mode</li> <li><code>0.25.6</code> Plugin <code>git_publish</code> with branch selection support (p.e. <code>gh-pages</code>)</li> <li><code>0.24.0</code> Plugin <code>docker_build</code></li> <li><code>0.23.0</code> Plugin <code>fetch</code> download from GitHub (advanced)</li> <li><code>0.22.0</code> Plugin <code>fetch</code> download from GitHub (folder)</li> <li><code>0.21.0</code> Plugin <code>flawfinder</code></li> <li><code>0.20.0</code> Docker image <code>intmain/microci_clang</code></li> <li><code>0.19.0</code> Documentation with <code>intmain/docmd</code></li> <li><code>0.18.0</code> Plugin <code>minio</code></li> <li><code>0.17.0</code> Plugin <code>skip</code>; Execution status</li> <li><code>0.16.1</code> Plugin refactoring; Default execution as non-root</li> <li><code>0.15.2</code> Plugin <code>fetch</code> URL and gitlab folder</li> <li><code>0.14.1</code> Plugin <code>beamer</code></li> <li><code>0.13.0</code> Docker network configuration</li> <li><code>0.12.0</code> Plugins <code>clang-format</code> and <code>junit2html</code></li> <li><code>0.11.1</code> Discord channel notification</li> <li><code>0.10.1</code> Multiple template added</li> <li><code>0.9.0</code> Plugin <code>plantuml</code></li> <li><code>0.8.0</code> Plugin <code>clang-tidy</code></li> <li><code>0.7.0</code> Plugin <code>cppcheck</code></li> <li><code>0.6.1</code> Plugin <code>git_publish</code></li> <li><code>0.5.0</code> Volume mounting; SSH key copy</li> <li><code>0.4.0</code> Building microCI by microCI</li> <li><code>0.3.0</code> Configuration files creation</li> <li><code>0.2.0</code> Plugin <code>mkdocs</code></li> <li><code>0.1.0</code> Plugin <code>bash</code> and <code>git_deploy</code></li> <li><code>0.0.1</code> Proof of concept/Initial version</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022-2025 Geraldo Luis da Silva Ribeiro</p> <pre><code>\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2588\u2580\u2591\u2591\u2591\n\u2591\u2591\u2591\u2588\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2591\u2591\n\u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n</code></pre> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"00_usage/","title":"Usage","text":"<p>The basic usage can be obtained by passing the <code>--help</code> option:</p> <pre><code>microCI --help\n                           \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n                           \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2588\u2580\u2591\u2591\u2591\n                           \u2591\u2591\u2591\u2588\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\n                           \u2591\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2591\u2591\n                           \u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n                           \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n                             microCI 0.30.0\n                            Geraldo Ribeiro\n\n\nOp\u00e7\u00f5es:\n  -h,--help                Print this help\n  -V,--version             Print the microCI version\n  -T,--test-config         Configuration test\n  -O,--only                Execute only a single step\n  -U,--update-db           Update observability database\n  -u,--update              Update microCI\n  -i,--input file.yml      Load the configuration from file.yml\n  -n,--new skip            Create a placeholder step\n  -n,--new bash            Create a command line step\n  -n,--new docmd           Create a documentation step\n  -n,--new mkdocs_material Create a documentation step\n  -n,--new pandoc          Create a document conversion step\n  -n,--new git_publish     Create a publish step\n  -n,--new git_deploy      Create a production deploy step\n  -n,--new plantuml        Create a diagram generation step\n  -n,--new pikchr          Create a diagram generation step\n  -n,--new clang-format    Create a code format step\n  -n,--new beamer          Create a PDF presentation step\n  -n,--new fetch           Create a download external artfact step\n  -n,--new minio           Create a upload/download internal artifact step\n  -n,--new cppcheck        Create a C++ SAST step\n  -n,--new clang-tidy      Create a C++ SAST step\n  -n,--new flawfinder      Create a C++ SAST step\n  -n,--new docker_build    Create a local docker build step\n</code></pre>"},{"location":"00_usage/#activity-diagram","title":"Activity diagram","text":"<p>To generate activity diagrams for the workflow use the option <code>--actvity-diagram</code> option</p> <p>There are two king of steps:</p> <ul> <li>main step: list of sequential steps executed on the main pipeline</li> <li>only step: alternative single step executed alone</li> </ul> <p>The diagrams below are generated automatically by microCI based on <code>.microCI.yml</code> file.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"config_display/","title":"Running graphical application inside docker","text":"<p>To enable execution of graphical application inside the docker container you should add the <code>DISPLAY</code> environment variable, and mount the <code>/tmp/.X11-unix</code>.</p> <pre><code>  - name: \"QtCreator GUI for local edition\"\n    docker: \"my_company/devel-ubuntu-24.04_x86_64\"\n    network: none\n    only: qtcreator\n    run_as: user\n    envs:\n      DISPLAY: \"$DISPLAY\"\n      HOME: /microci_workspace # Folder where qtcreator saves .config\n    volumes:\n      - destination: /tmp/.X11-unix\n        source: /tmp/.X11-unix\n        mode: rw\n    plugin:\n      name: bash\n      bash: |\n        qtcreator\n</code></pre>"},{"location":"environmen_variables/","title":"Environment variables","text":"<p>The environment variables are loaded from the following files:</p> <ul> <li><code>$HOME/.microCI.env</code></li> <li><code>.env</code></li> <li><code>.env.yml</code></li> </ul> <p>Some special variables can be automatically loaded if defined.</p>"},{"location":"intmain_docmd/","title":"Intmain docmd","text":"<p>Fonte: <code>dockerfiles/intmain_docmd</code></p>"},{"location":"intmain_docmd/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Ferramenta para gera\u00e7\u00e3o de documenta\u00e7\u00e3o em formato markdown.</p>"},{"location":"intmain_docmd/#uso","title":"Uso","text":"<pre><code>intmain_docmd tipo arquivo_fonte arquivo_markdown\n</code></pre> <p>onde <code>tipo</code> pode ser:</p> <ul> <li><code>bash</code></li> <li><code>c++</code></li> <li><code>coffee</code></li> <li><code>conf</code></li> <li><code>grdb</code></li> <li><code>makefile</code></li> <li><code>nginx</code></li> <li><code>python</code></li> <li><code>ruby</code></li> <li><code>scss</code></li> <li><code>systemd</code></li> <li><code>vim</code></li> <li><code>yaml</code></li> </ul> <p>Se nenhum argumento for fornecido o programa imprime a ajuda e finaliza a execu\u00e7\u00e3o.</p> Detalhes <p> <pre><code>if ARGV.empty?\n  puts \"\"\"\nGerador de documenta\u00e7\u00e3o em formato Markdown\n\nintmain_docmd tipo arquivo_fonte arquivo_markdown\n\ntipo: vim, bash, python, ruby, coffee, makefile, grdb, nginx, scss, conf, c++, systemd, yaml\n\nPara alterar o comportamento da ferramenta utilize as seguintes vari\u00e1veis de ambiente:\n\n  INTMAIN_DOCMD_DETAILS=false     desabilita a tag details\n  INTMAIN_DOCMD_TOC=false         desabilita a gera\u00e7\u00e3o de sum\u00e1rio\n  INTMAIN_DOCMD_SHOW_SOURCE=false desabilita a identifica\u00e7\u00e3o do arquivo fonte\n  \"\"\"\n  exit\nend\n</code></pre> </p>"},{"location":"intmain_docmd/#exemplo-real","title":"Exemplo real","text":"<p>A documenta\u00e7\u00e3o deste projeto \u00e9 mantida utilizando-se o <code>intmain_docmd</code>:</p> <pre><code>intmain_docmd ruby     bin/intmain_docmd               doc/10_Gerador_de_documenta\u00e7\u00e3o_intmain_docmd.md\nintmain_docmd bash     bin/intmain_resize_screenshots  doc/20_Redimensionador_de_screenshots.md\nintmain_docmd bash     scripts/Common/intmain.bash     doc/20_Biblioteca_de_scripts_intmain.md\nintmain_docmd bash     scripts/Common/taoker.bash      doc/21_Biblioteca_de_scripts_taoker.md\nintmain_docmd bash     scripts/Common/common.bash      doc/30_Biblioteca_de_fun\u00e7\u00f5es_bash.md\nintmain_docmd makefile scripts/Common/Makefile.include doc/40_Biblioteca_de_alvos_make.md\n</code></pre>"},{"location":"intmain_docmd/#variaveis-de-controle","title":"Vari\u00e1veis de controle","text":"<ul> <li><code>INTMAIN_DOCMD_DETAILS</code>: ativa/desativa o encapsulamento dos trecho de c\u00f3digo</li> <li><code>INTMAIN_DOCMD_TOC</code>: ativa/desativa a gera\u00e7\u00e3o do \u00edndice</li> <li><code>INTMAIN_DOCMD_SHOW_SOURCE</code>: exibe o nome do arquivo de origem</li> </ul> Detalhes <p> <pre><code>use_detail  = ( ENV['INTMAIN_DOCMD_DETAILS']     || 'true' ).match( /(true|t|yes|y)/i )\nuse_toc     = ( ENV['INTMAIN_DOCMD_TOC']         || 'true' ).match( /(true|t|yes|y)/i )\nshow_source = ( ENV['INTMAIN_DOCMD_SHOW_SOURCE'] || 'true' ).match( /(true|t|yes|y)/i )\n</code></pre> </p>"},{"location":"intmain_docmd/#callout-numbers","title":"Callout numbers","text":"<p>Para referenciar comandos use itens numerados, p. e. \u2776, para indicar uma linha no meio do c\u00f3digo.</p> Detalhes <p> <pre><code>def expand_shortcuts(text)\n  callout_numbers = { \"\u2776\" =&gt; \"\u2776\", \"\u2777\" =&gt; \"\u2777\", \"\u2778\" =&gt; \"\u2778\",\n                      \"\u2779\" =&gt; \"\u2779\", \"\u277a\" =&gt; \"\u277a\", \"\u277b\" =&gt; \"\u277b\",\n                      \"\u277c\" =&gt; \"\u277c\", \"\u277d\" =&gt; \"\u277d\", \"\u277e\" =&gt; \"\u277e\",\n                      \"\u277f\" =&gt; \"\u277f\", \"\u24eb\" =&gt; \"\u24eb\", \"\u24ec\" =&gt; \"\u24ec\",\n                      \"\u24ed\" =&gt; \"\u24ed\", \"\u24ee\" =&gt; \"\u24ee\", \"\u24ef\" =&gt; \"\u24ef\",\n                      \"\u24f0\" =&gt; \"\u24f0\", \"\u24f1\" =&gt; \"\u24f1\", \"\u24f2\" =&gt; \"\u24f2\",\n                      \"\u24f3\" =&gt; \"\u24f3\", \"\u24f4\" =&gt; \"\u24f4\" }\n  callout_numbers.each{ |k,v| text = text.gsub( k, v ) }\n  text\nend\n</code></pre> </p>"},{"location":"intmain_docmd/#inclusao-de-diagramas-com-plantuml","title":"Inclus\u00e3o de diagramas com plantuml","text":"<p>Os trechos em <code>plantuml</code> a seguir ser\u00e3o substitu\u00eddos pela imagem do diagrama.</p> <p></p> <p></p> <p></p>"},{"location":"plugin_bash/","title":"bash plugin","text":"<pre><code>steps:\n  - name: \"Build static version of microCI\"\n    description: \"Description of this step\"\n    docker: \"gcc:13\"     # Image that will be executed\n    network: bridge      # bridge, host or none\n    devices:\n      - \"/dev/dri/\"\n    run_as: root     # root, user\n    envs:\n      ENV1: \"value of the environment variable ENV1\"\n      ENV2: \"value of the environment variable ENV2\"\n    plugin:\n      name: bash\n      bash: |\n        # Comments are allowed between commands\n        apt update\n        apt upgrade -y\n        # These packages are installed in the image\n        apt install -y xxd libspdlog-dev libyaml-cpp-dev\n        make -C src clean all\n        make -C test\n        # Makes the current user the owner of the generated file\n        chown $(id -u):$(id -g) -Rv src/microCI\n</code></pre>"},{"location":"plugin_beamer/","title":"beamer plugin","text":"<pre><code>steps:\n  - name: Create PDF presentation from Markdown\n    plugin:\n      name: beamer\n      output: output_filename.pdf\n      source:\n        - 00-introduction.md\n        - 01-body.md\n        - 02-conclusion.md\n        - 99-references.md\n      lang: pt-BR # en-US\n      institute: Institution Name\n      date: 01 de Abril de 2023\n      title: Presentation Title\n      subtitle: Presentation Subtitle\n      author:\n        - Geraldo Ribeiro\n        - Other Author Name\n      # subject: Informa\u00e7\u00e3o da propriedade Assunto do PDF\n      # keywords: [keyword1, keyword2, keyword3, PDF]\n      # slide-level: 2   # use second level ##  to start a new slide\n      # aspectratio: 169 # 16:9 format\n      # links-as-notes: true\n      # natbib: true\n      # bibliography: refs.bib\n      # theme: STR\n      header-includes:\n        - \\usepackage{tikz}\n</code></pre>"},{"location":"plugin_clang-format/","title":"clang-format plugin","text":"<pre><code>steps:\n  - name: \"Formatar c\u00f3digo C++ com clang-format\"\n    description: \"Padroniza formato do c\u00f3digo usando regras\"\n    run_as: user\n    plugin:\n      name: \"clang-format\"\n      source: # Lista arquivos a serem formatados\n        - \"src/*.cpp\"\n        - \"test/*.cpp\"\n        - \"include/*.hpp\"\n</code></pre>"},{"location":"plugin_clang-format_config/","title":"clang-format_config plugin","text":"<pre><code>---\nBasedOnStyle: Google\nTabWidth: '2'\nUseTab: Never\nColumnLimit: 120\n\n...\n</code></pre>"},{"location":"plugin_clang-tidy/","title":"clang-tidy plugin","text":"<pre><code>steps:\n  - name: \"Create C++ code verification report - clang-tidy\"\n    description: \"Check C++ code and generate HTML report\"\n    network: bridge # http://clang.llvm.org/extra/clang-tidy/checks/list.html\n    plugin:\n      name: \"clang-tidy\"\n      checks:\n        - \"-*\"\n        - \"cppcoreguidelines-*\"\n        # - \"modernize-*\"\n        # - \"hicpp-*\"\n        # - \"performance-\"\n        # - \"portability-\"\n        # - \"readability-\"\n      fix: true\n      options:\n        - \"-std=c++11\"\n      include:\n        - \"include/\"\n      system_include:\n        - \"/usr/local/include\"\n        - \"/usr/include/\"\n      source:\n        - \"src/*.cpp\"\n        - \"test/*.cpp\"\n</code></pre>"},{"location":"plugin_cppcheck/","title":"cppcheck plugin","text":"<pre><code>steps:\n  - name: \"Create C++ code verification report - cppcheck\"\n    description: \"Check C++ code and generate HTML report\"\n    plugin:\n      name: \"cppcheck\"\n      options:\n        # - \"-j 2\"             # two jobs simultaneously\n        # - \"--clang=clang-11\" # uses clang as analyser\n        # - \"--bug-hunting\"    # useful for code review\n        # - \"--std=c++11\"\n      include:\n        - \"include\"\n      source:\n        - \"src\"\n        - \"test\"\n      platform: \"unix64\"\n</code></pre>"},{"location":"plugin_doxygen/","title":"doxygen plugin","text":"<pre><code>steps:\n  - name: \"Build documentation with doxygen\"\n    description: \"Build documentation with doxygen\"\n    docker: \"intmain/microci_doxygen\"\n    plugin:\n      name: doxygen\n      #doxyfile: ./Doxyfile     # Default\n      #output_dir: doxygen      # Default\n      #html:\n        #header: header.html    # Optional\n        #footer: footer.html    # Optional\n        #stylesheet: style.css  # Optional\n</code></pre>"},{"location":"plugin_fetch/","title":"fetch plugin","text":"<pre><code>---\nsteps:\n  - name: \"Baixar arquivos externos ao projeto\"\n    description: \"Download de depend\u00eancias utilizadas na compila\u00e7\u00e3o\"\n    ssh: # usado pelo git_archive\n      copy_from: \"${HOME}/.ssh\"\n    plugin:\n      name: \"fetch\"\n      target: include # local padr\u00e3o para os arquivos\n      items:\n        - git_archive: https://github.com/geraldolsribeiro/microCI.git\n          target: /tmp/\n          tag: master\n          strip-components: 1 # remove 1 n\u00edvel\n          files:\n            - test/help.txt # Arquivo final ser\u00e1 /tmp/help.txt\n        - git_archive: https://github.com/User/repo/archive/master.tar.gz\n          target: /tmp/\n          token: personal_token\n          files:\n            - README.md\n        - git_archive: https://github.com/User/repo/archive/master.tar.gz\n          offline: /tmp/repo.tar.gz\n          target: /tmp/\n          token: personal_token\n          files:\n            - README.md\n        - git_archive: git@gitlabcorp.xyz.com.br:group/repo.git\n          target: /tmp/include/\n          tag: HEAD\n          files:\n            - README.md\n            - include/*.h\n        - git_archive: git@gitlabcorp.xyz.com.br:group/repo.git\n          target: /tmp/lib/\n          files:\n            - lib/*.so\n        - git_archive: git@gitlabcorp.xyz.com.br:group/repo.git\n          target: /tmp/lib/\n          strip-components: 2 # remove 2 n\u00edveis\n          files:\n            - path1/path2/lib/*.so\n        - url: https://raw.githubusercontent.com/adishavit/argh/master/argh.h\n          target: /tmp/include # Local onde ser\u00e1 colocado este arquivo\n        - url: https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp\n        - url: https://raw.githubusercontent.com/pantor/inja/master/single_include/inja/inja.hpp\n        - github:   adishavit/argh    master   \n        - github: adishavit/argh v1.3.2\n          target: /tmp/\n        - github: adishavit/argh v1.3.2\n          offline: /tmp/repo2.tar.gz\n</code></pre>"},{"location":"plugin_fetch2/","title":"fetch plugin (2)","text":"<pre><code>---\nsteps:\n  - name: \"Baixar arquivos externos ao projeto\"\n    description: \"Download de depend\u00eancias utilizadas na compila\u00e7\u00e3o\"\n    ssh: # usado pelo git_archive\n      copy_from: \"${HOME}/.ssh\"\n      copy_to: \"/home/bitnami/.ssh\"\n    plugin:\n      name: \"fetch\"\n      target: include # local padr\u00e3o para os arquivos\n      items:\n        - git_archive: git@gitlabcorp.xyz.com.br:group/repo.git\n          target: /tmp/include/\n          files:\n            - README.md\n            - include/*.h\n        - git_archive: git@gitlabcorp.xyz.com.br:group/repo.git\n          target: /tmp/lib/\n          files:\n            - lib/*.so\n        - url: https://raw.githubusercontent.com/adishavit/argh/master/argh.h\n          target: /tmp/include # Local onde ser\u00e1 colocado este arquivo\n        - url: https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp\n        - url: https://raw.githubusercontent.com/pantor/inja/master/single_include/inja/inja.hpp\n</code></pre>"},{"location":"plugin_git_deploy/","title":"git_deploy plugin","text":"<pre><code>---\nsteps:\n  - name: \"Deploy de p\u00e1gina de aplica\u00e7\u00e3o VueJS\"\n    description: \"Descri\u00e7\u00e3o do passo\"\n    plugin:\n      name: \"git_deploy\"\n      # Reposit\u00f3rio contendo a \u00faltima vers\u00e3o da aplica\u00e7\u00e3o\n      repo: \"git@gitlab.xyx.com.br:str/app_frontend_deploy.git\"\n      # Local no servidor onde ficar\u00e1 o reposit\u00f3rio git local\n      git_dir: \"/opt/microCI/repos/app_frontend_deploy\"\n      # Local no servidor onde ser\u00e1 feito o deploy dos arquivos\n      work_tree: \"/var/www/my-intranet/html/app\"\n      clean: true\n</code></pre>"},{"location":"plugin_git_publish/","title":"git_publish plugin","text":"<pre><code>---\nsteps:\n  - name: \"Publicar em outro reposit\u00f3rio git\"\n    description: \"Descri\u00e7\u00e3o deste passo\"\n    # network: bridge # (default)\n    # run_as: root\n    # run_as: user # (default)\n    ssh:\n      copy_from: \"${HOME}/.ssh\"\n      # copy_to: \"/root/.ssh\"          # root\n      # copy_to: \"/tmp/microci_deploy\" # user (default)\n    plugin:\n      name: \"git_publish\"\n      git_url: \"git@seuservidor.com.br:awesome_deploy.git\"\n      branch: \"gh-pages\"             # O branch padr\u00e3o \u00e9 o 'main'\n      copy_to: \"/tmp/microci_deploy\" # Pasta padr\u00e3o dentro do container\n      copy_from: \"site\"              # Pasta padr\u00e3o que cont\u00eam os arquivos\n      clean_before: true             # Remove todos os arquivos antes de copiar o novos\n</code></pre>"},{"location":"plugin_minio/","title":"minio plugin","text":"<p>See MinIO Client documentation at https://github.com/minio/mc.</p> <pre><code>steps:\n  - name: \"Save artifact in bucket\"\n    description: \"Description of this step\"\n    run_as: user\n    envs:\n      HOME: /tmp/\n    plugin:\n      name: minio\n      bash: |\n        # List files in the bucket\n        mc ls microci/bucket_name\n        # Copy files from workspace to the bucket\n        mc cp Makefile microci/bucket_name/\n        # Copy files from the bucket to the workspace\n        mc cp microci/bucket_name/image.png .\n</code></pre>"},{"location":"plugin_mkdocs_material/","title":"mkdocs_material plugin","text":"<pre><code>---\nsteps:\n  - name: \"Build documentation\"\n    description: \"Build the project documentation in HTML format using mkdocs\"\n    plugin:\n      name: \"mkdocs_material\"\n      action: \"build\"\n        # If you want to build the documentation into a different folder use:\n        # action: \"build --site-dir nome_da_pasta\n  - name: \"Publish documentation\"\n    description: \"Publish documentation using git\"\n    ssh:\n      # Use your SSH credential to update the documentation site\n      copy_from: \"${HOME}/.ssh\"\n      copy_to: \"/root/.ssh\"\n    plugin:\n      name: \"git_publish\"\n      git_url: \"ssh://git@someurl.com/site.git\"\n      copy_to: \"/deploy\" # Default parameter, can be omitted\n      copy_from: \"site\"  # Default parameter, can be omitted\n      clean_before: true # Default parameter, can be omitted\n  - name: \"Launch local documentation server 127.0.0.1:8000 (Ctrl+C to stop)\"\n    description: \"Display the documentation preview locally\"\n    only: \"serve\" # this step should executed locally\n    network: host\n    plugin:\n      name: \"mkdocs_material\"\n      action: \"serve\"\n      port: 8000\n</code></pre>"},{"location":"plugin_mkdocs_material_config/","title":"mkdocs_material_config plugin","text":"<pre><code>site_name: Site name\nrepo_url: https://github.com/geraldolsribeiro/microCI\nrepo_name: geraldolsribeiro/microCI\nedit_uri: edit/master/docs/\ntheme:\n  name: material\n  # language: pt\n  # logo: images/logo.svg\n  # favicon: images/favicon.png\n  palette:\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 \n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n  icon:\n    repo: fontawesome/brands/github\n    # repo: fontawesome/brands/gitlab\nfeatures:\n  - navigation.instant\nextra:\n  homepage: http://url-final-do-projeto/\nextra_css:\n  - css/print.css\nmarkdown_extensions:\n  - admonition\n  - def_list\n  # Para utilizar atributos nas imagens\n  # ![WebCapture](/img/support/prod/screenshot-web-capture.png){: style=\"height:150px;width:150px\"}\n  - attr_list\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.mark\n  - pymdownx.snippets\nplugins:\n  - search:\n      lang: pt\n  - mermaid2\n</code></pre>"},{"location":"plugin_npm/","title":"npm plugin","text":"<pre><code>docker: \"node:16\"\nsteps:\n  - name: \"Instalar depend\u00eancias\"\n    description: \"Descri\u00e7\u00e3o do passo\"\n    bash: |\n      npm install\n  - name: \"Verificar o c\u00f3digo\"\n    bash: |\n      npm run lint --fix\n  - name: \"Construir\"\n    bash: |\n      npm run build\n</code></pre>"},{"location":"plugin_pandoc/","title":"pandoc plugin","text":"<pre><code>steps:\n  - name: \"Generate PDF from Markdown\"\n    description: \"Description of this step\"\n    plugin:\n      name: pandoc\n      base_path: .\n      inputs:\n        - README.md\n      output: README.pdf\n      options:\n        - --standalone\n        - --toc\n        - --number-sections\n</code></pre>"},{"location":"plugin_pikchr/","title":"pikchr plugin","text":"<pre><code>steps:\n  - name: \"Build diagrams\"\n    description: \"Build diagrams from textual description\"\n    plugin:\n      name: \"pikchr\"\n      source:\n        - \"docs/diagrams/*.pikchr\"            # Search for all filename with pikchr extension\n      type: svg                               # Can be svg, png or pdf\n      output_folder: \"docs/diagrams/\"         # Folder for saving generated diagrams\n</code></pre>"},{"location":"plugin_plantuml/","title":"plantuml plugin","text":"<pre><code>steps:\n  - name: \"Build diagrams\"\n    description: \"Build diagrams from textual description\"\n    plugin:\n      name: \"plantuml\"\n      source:\n        - \"src/**.cpp\"                        # Search for inline plantuml recursively inside all C++ source code\n        - \"docs/**.puml\"                      # Search for all filename with puml extension\n      type: svg                               # Can be svg, png or pdf\n      output_folder: \"docs/diagrams/\"         # Folder for saving generated diagrams\n      config: \"docs/diagrams/skinparams.iuml\" # Common styles\n</code></pre>"},{"location":"plugin_skip/","title":"skip plugin","text":"<pre><code>steps:\n  - name: \"Ignored step\"\n    description: \"This step should be ignored\"\n    plugin:\n      name: skip\n  - name: \"Build static version of microCI\"\n    description: \"This step should be executed\"\n    docker: \"gcc:13\"\n    network: bridge\n    run_as: root\n    plugin:\n      name: skip # Este passo n\u00e3o ser\u00e1 executado\n      bash: |\n        apt update\n        apt upgrade -y\n        apt install -y xxd libspdlog-dev libyaml-cpp-dev\n        make -C src clean all\n        make -C test\n        # Ajusta o dono do arquivo do root para o usu\u00e1rio atual\n        chown $(id -u):$(id -g) -Rv src/microCI\n</code></pre>"},{"location":"server_configuration_docker_registry/","title":"Docker Registry Server","text":"<p>The following <code>Makefile</code> can be used to setup a private docker registry.</p> <pre><code>IP=10.20.30.40\n\n.PHONY: all\nall:\n\n.PHONY: start\nstart:\n    docker run \\\n        --detach \\\n        --publish 5000:5000 \\\n        --env REGISTRY_STORAGE_DELETE_ENABLED=true \\\n        --volume $(shell pwd)/registry:/var/lib/registry \\\n        --volume $(shell pwd)/config.yml:/etc/docker/registry/config.yml \\\n        --restart=always \\\n        --name registry \\\n        registry:2\n\n.PHONY: stop\nstop:\n    docker container stop registry || echo \"Already stopped\"\n\n.PHONY: remote\nremove: stop\n    docker container rm -v registry\n\n.PHONY: clean\nclean:\n    docker exec -it registry registry garbage-collect --delete-untagged /etc/docker/registry/config.yml\n\n.PHONY: extract_config_yml\nextract_config_yml:\n    docker cp registry:/etc/docker/registry/config.yml config-default.yml\n\n.PHONY: test\ntest:\n    docker pull hello-world\n    docker tag hello-world $(IP):5000/my-hello-world\n    docker push $(IP):5000/my-hello-world\n    curl http://$(IP):5000/v2/_catalog | grep \"my\\-hello\\-world\"\n    docker image remove hello-world\n    docker image remove $(IP):5000/my-hello-world\n\n.PHONY: list\nlist:\n    curl http://$(IP):5000/v2/_catalog | jq\n</code></pre>"},{"location":"server_configuration_docker_registry/#config-defaultyml","title":"config-default.yml","text":"<p>A tipical config extracted by using the Makefile above has the following structure:</p> <pre><code>version: 0.1\nlog:\n  fields:\n    service: registry\nstorage:\n  cache:\n    blobdescriptor: inmemory\n  filesystem:\n    rootdirectory: /var/lib/registry\nhttp:\n  addr: :5000\n  headers:\n    X-Content-Type-Options: [nosniff]\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\n</code></pre>"},{"location":"server_configuration_docker_registry/#access-control-headers","title":"Access-Control headers","text":"<pre><code>http:\n  headers:\n    Access-Control-Allow-Origin:\n    - '*'\n    Access-Control-Allow-Methods:\n    - GET\n    - POST\n    - DELETE\n    - PUT\n    Access-Control-Allow-Headers:\n    - 'origin, authorization, accept'\n</code></pre>"},{"location":"server_configuration_docker_registry_ui/","title":"Docker Registry UI","text":""},{"location":"server_configuration_docker_registry_ui/#docker-composeyml-example","title":"<code>docker-compose.yml</code> example","text":"<pre><code>services:\n  registry-ui:\n    image: joxit/docker-registry-ui:main\n    restart: always\n    ports:\n      - 5001:80\n    environment:\n      - SINGLE_REGISTRY=true\n      - REGISTRY_TITLE=My Company Docker Registry UI\n      - DELETE_IMAGES=true\n      - SHOW_CONTENT_DIGEST=true\n      - NGINX_PROXY_PASS_URL=http://10.20.30.40:5000\n      - SHOW_CATALOG_NB_TAGS=true\n      - CATALOG_MIN_BRANCHES=1\n      - CATALOG_MAX_BRANCHES=1\n      - TAGLIST_PAGE_SIZE=100\n      - REGISTRY_SECURED=false\n      - CATALOG_ELEMENTS_LIMIT=1000\n    container_name: registry-ui\n</code></pre>"},{"location":"server_configuration_docker_registry_ui/#makefile-example","title":"<code>Makefile</code> example","text":"<pre><code>.PHONY: all\nall:\n\n.PHONY: start\nstart:\n    docker compose up --detach\n\n.PHONY: stop\nstop:\n    docker compose down\n\n.PHONY: restart\nrestart: stop start\n\n.PHONY: upgrade\nupgrade:\n    docker pull joxit/docker-registry-ui:main\n</code></pre>"},{"location":"server_configuration_minio/","title":"MinIO Server","text":"<p>A MinIO Server can be deployed by docker container.</p> <p>Consider the following <code>Makefile</code> as a starting point setting up your server. Securing the server is not covered in this topic.</p>"},{"location":"server_configuration_minio/#makefile","title":"Makefile","text":"<pre><code>DOCKER_REGISTRY_IP=10.20.30.40\n\nifneq (,$(wildcard ./.env))\n    include .env\n    export\nendif\n\n.PHONY: all\nall:\n\n.PHONY: upgrade\nupgrade:\n    docker pull minio/minio\n    docker tag  minio/minio $(DOCKER_REGISTRY_IP):5000/minio/minio\n    docker push $(DOCKER_REGISTRY_IP):5000/minio/minio\n\n.PHONY: start\nstart:\n    docker run \\\n        --detach \\\n        --restart=always \\\n        --publish 9000:9000 \\\n        --publish 9001:9001 \\\n        --volume $(shell pwd)/data:/data \\\n        --env MINIO_ROOT_USER=$(MINIO_ROOT_USER) \\\n        --env MINIO_ROOT_PASSWORD=$(MINIO_ROOT_PASSWORD) \\\n        --name minio \\\n        minio/minio \\\n        server /data \\\n        --console-address \":9001\"\n\n.PHONY: stop\nstop:\n    docker container stop minio  || echo \"Already stopped\"\n    docker container rm -v minio || echo \"Already removed\"\n\n.PHONY: remove\nremove: stop\n    docker container rm -v minio || echo \"Already removed\"\n\n.env:\n    echo \"MINIO_ROOT_USER=minioadmin\" &gt; $@\n    echo \"MINIO_ROOT_PASSWORD=$(shell pwgen 12 1)\" &gt;&gt; $@\n</code></pre>"},{"location":"server_configuration_minio/#gitlab-ciyml","title":".gitlab-ci.yml","text":"<p>The following config can be used to upgrade the server.</p> <pre><code>before_script:\n  - echo apt-get update -qq\n  - echo apt-get install -qq git\n  # Setup SSH deploy keys\n  - 'which ssh-agent || ( apt-get install -qq openssh-client )'\n  - eval $(ssh-agent -s)\n  - ssh-add &lt;(echo \"$SSH_PRIVATE_KEY\")\n  - mkdir -p ~/.ssh\n  - grep -q 10.20.30.40 ~/.ssh/known_host || ssh-keyscan -t rsa 10.20.30.40 &gt;&gt; ~/.ssh/known_hosts\n  - '[[ -f /.dockerenv ]] &amp;&amp; echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" &gt; ~/.ssh/config'\n\ndeploy:\n  environment: production\n  script:\n    - ssh admin@10.20.30.40 \"cd /opt/docker/minio &amp;&amp; git checkout main &amp;&amp; git pull origin main &amp;&amp; make upgrade &amp;&amp; make stop &amp;&amp; make start &amp;&amp; exit\"\n  only:\n    - main\n</code></pre>"},{"location":"tutorial/tutorial_mkdocs_material_local/","title":"Tutorial mkdocs local","text":""},{"location":"tutorial/tutorial_mkdocs_material_local/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O objetivo deste tutorial \u00e9 a execu\u00e7\u00e3o do <code>microCI</code> localmente para criar documenta\u00e7\u00e3o.</p> <p>A ferramenta mkdocs-material oferece uma maneira pr\u00e1tica para documentar o projeto usando arquivos no formato markdown. Neste tutorial veremos como criar um projeto mkdocs e gerar uma documenta\u00e7\u00e3o usando o <code>microCI</code>.</p>"},{"location":"tutorial/tutorial_mkdocs_material_local/#configuracao-do-microci","title":"Configura\u00e7\u00e3o do microCI","text":"<p>O <code>microCI</code> cria um arquivo de configura\u00e7\u00e3o inicial para executar  o <code>mkdocs-material</code>:</p> <pre><code>microCI --new mkdocs_material\n</code></pre> <p></p> <p>Um arquivo chamado <code>.microCI.yml</code> foi criado no diret\u00f3rio atual:</p> <pre><code>---\nsteps:\n  # Remova este passo ap\u00f3s a primeira execu\u00e7\u00e3o\n  - name: \"Criar arquivos iniciais do mkdocs\"\n    plugin:\n      name: \"mkdocs_material\"\n      action: \"new .\"\n  - name: \"Construir documenta\u00e7\u00e3o em formato HTML\"\n    description: \"Documenta\u00e7\u00e3o do projeto\"\n    plugin:\n      name: \"mkdocs_material\"\n      action: \"build\"\n      # Contruindo para uma pasta personalizada\n      # action: \"build --site-dir public\n  - name: \"Servidor local na porta 8000 (Ctrl+C para finalizar)\"\n    description: \"Executa servidor local para preview da documenta\u00e7\u00e3o\"\n    # passo executado localmente\n    only: \"local-step\"\n    plugin:\n      name: \"mkdocs_material\"\n      action: \"serve\"\n      # Porta personalizada, caso j\u00e1 esteja utilizando a padr\u00e3o 8000\n      # port: 9001\n</code></pre> <p>Cada chave <code>name</code> inicia um novo passo. No arquivo criado existem 3 passos:</p> <ul> <li><code>Criar arquivos iniciais do mkdocs</code></li> <li><code>Construir documenta\u00e7\u00e3o em formato HTML</code></li> <li><code>Servidor local na porta 8000</code></li> </ul> <p>Passos com a chave <code>only</code> n\u00e3o s\u00e3o executados por padr\u00e3o.</p>"},{"location":"tutorial/tutorial_mkdocs_material_local/#primeira-execucao","title":"Primeira execu\u00e7\u00e3o","text":"<p>Edite o arquivo <code>.microCI.yml</code> para ajustar a configura\u00e7\u00e3o se necess\u00e1rio e execute:</p> <pre><code>microCI | bash\n</code></pre> <p>Se a gera\u00e7\u00e3o foi bem sucedida o nome dos passos seguidos de <code>OK</code> s\u00e3o exibidos no terminal:</p> <pre><code>Criar arquivos iniciais do mkdocs...............: OK\nConstruir documenta\u00e7\u00e3o em formato HTML..........: OK\n</code></pre> <p></p> <p>Remova o primeiro passo (Criar arquivos iniciais do mkdocs) e execute o comando novamente:</p> <pre><code>microCI | bash\n</code></pre> <p></p>"},{"location":"tutorial/tutorial_mkdocs_material_local/#passos-adicionais","title":"Passos adicionais","text":"<p>A configura\u00e7\u00e3o contem um passo que pode ser executado sozinho para subir um servidor para previsualizar a documenta\u00e7\u00e3o.</p> <pre><code>microCI --only local-step | bash\n</code></pre> <p></p>"},{"location":"tutorial/tutorial_mkdocs_material_servidor/","title":"Tutorial mkdocs servidor","text":""},{"location":"tutorial/tutorial_mkdocs_material_servidor/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Depois de executar o <code>microCI</code> localmente no tutorial anterrior, podemos come\u00e7ar a automa\u00e7\u00e3o da pipeline atrav\u00e9s de webhooks e execu\u00e7\u00e3o remota.</p> <p>Neste tutorial ser\u00e1 mostrado como, a partir de um <code>commit</code> no reposit\u00f3rio de trabalho, \u00e9 gerada a vers\u00e3o final e disponibiliza\u00e7\u00e3o em produ\u00e7\u00e3o. </p> <p>A execu\u00e7\u00e3o se dar\u00e1 conforme a figura abaixo:</p> <p></p> <p>Evento inicial: O desenvolvedor atualiza a documenta\u00e7\u00e3o realiza um <code>commit</code> e envia para o servidor git.</p> <p>Passo 1: O servidor git recebe o evento de <code>push</code> com os <code>commits</code> do usu\u00e1rio e dispara um webhook vinculado ao reposit\u00f3rio.</p> <p>Nota: o evento de <code>push</code> ocorre uma \u00fanica vez mesmo que este contenha v\u00e1rios <code>commits</code>.</p> <p>Passo 2: O servidor de webhook recebe as informa\u00e7\u00f5es do \u00faltimo <code>commit</code> e executa um script vinculado ao webhook.</p> <p>Nota: o servidor de <code>webhook</code> utilizado neste exemplo pode ser obtido em https://github.com/adnanh/webhook.</p> <p>Abaixo est\u00e3o a declara\u00e7\u00e3o dois webhooks usados neste tutorial:</p> <pre><code># Disparado no passo 2\n- id: \"microCI_awesome\"\n  execute-command: \"/usr/bin/microCI.sh\"\n  command-working-directory: \"/opt/microCI/repos/awesome/\"\n\n# Disparado no passo 5\n- id: \"microCI_awesome_deploy\"\n  execute-command: \"/usr/bin/microCI.sh\"\n  command-working-directory: \"/opt/microCI/repos/awesome_deploy/\"\n</code></pre> <p>Nota: todos os webhooks executam o mesmo script</p> <p>Passo 3: Uma implementa\u00e7\u00e3o m\u00ednima do script de adapta\u00e7\u00e3o do webhook para o microCI  pode ser vista a seguir:</p> <pre><code>#!/bin/bash\n# Arquivo microCI.sh\n# Acrescente suas personaliza\u00e7\u00f5es aqui\n\nif [ -d \".git\" ]; then\n  git pull\nfi\n\n# Este comando \u00e9 executado no caminho do reposit\u00f3rio\nmicroCI | bash\n</code></pre> <p>Nota: O procedimento \u00e9 id\u00eantico ao executado localmente: o <code>microCI</code> l\u00ea a configura\u00e7\u00e3o do arquivo <code>.microCI.yml</code> e executa os passos descritos.</p> <pre><code># Arquivo .microCI.yml do reposit\u00f3rio awesome\n---\nsteps:\n  - name: \"Construir documenta\u00e7\u00e3o em formato HTML\"\n    description: \"Documenta\u00e7\u00e3o do projeto\"\n    plugin:\n      name: \"mkdocs_material\"\n      action: \"build\"\n  - name: \"Publicar HTML para reposit\u00f3rio git\"\n    ssh:\n      copy_from: \"${HOME}/.ssh\"\n      copy_to: \"/root/.ssh\"\n    plugin:\n      name: \"git_publish\"\n      git_url: \"git@nome_do_servidor.com.br:awesome_deploy.git\"\n      copy_to: \"/deploy\"\n      copy_from: \"site\"\n      clean_before: true\n</code></pre> <p>O plugin <code>mkdocs_material</code> com a a\u00e7\u00e3o <code>build</code> l\u00ea os arquivos markdown e constroi a documenta\u00e7\u00e3o em formato HTML e a salva na pasta <code>site</code> para ser utilizada no pr\u00f3ximo passo.</p> <p>O plugin <code>git_publish</code> clona o reposit\u00f3rio apontado por <code>git_url</code> na pasta <code>/deploy</code>, ent\u00e3o copia o conte\u00fado da pasta <code>site</code> para a pasta <code>/deploy</code>, dentro do container, e faz o <code>commit</code> para atualizando o repost\u00f3rio.</p> <p>Passo 4: O reposit\u00f3rio <code>awesome_deploy</code> recebe o <code>post</code> lan\u00e7ado pelo plugin <code>git_publish</code> no passo anterior e dispara outro webhook.</p> <p>Passo 5: O servidor de webhook recebe as informa\u00e7\u00f5es do \u00faltimo <code>commit</code> e executa um script vinculado ao webhook.</p> <pre><code># Disparado no passo 5\n- id: \"microCI_awesome_deploy\"\n  execute-command: \"/usr/bin/microCI.sh\"\n  command-working-directory: \"/opt/microCI/repos/awesome_deploy/\"\n</code></pre> <p>Nota: executa o procedimento igual ao do passo 2, mas desta vez na pasta do reposit\u00f3rio <code>awesome_deploy</code>.</p> <p>Passo 6: O <code>microCI</code> executa o plugin <code>git_deploy</code> que realiza o <code>checkout</code> do reposit\u00f3rio na pasta de implanta\u00e7\u00e3o. Para garantir que o hist\u00f3rico com os commits antigos n\u00e3o estar\u00e3o dispon\u00edveis em produ\u00e7\u00e3o o checkout \u00e9 realizado de forma dividida, ficando o hist\u00f3rico (<code>.git</code>) em uma pasta privada e somente os arquivos do \u00faltimo <code>commit</code> no caminho de <code>deploy</code> especificado.</p> <p>Passo 7: A pasta de <code>deploy</code> atualizada no passo anterior est\u00e1 dispon\u00edvel em produ\u00e7\u00e3o.</p>"}]}